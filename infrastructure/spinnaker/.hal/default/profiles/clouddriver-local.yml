server:
  port: 7002
  ssl:
    enabled: false
  compression:
    enabled: true

sql:
  enabled: true
  # read-only boolean toggles `SELECT` or `DELETE` health checks for all pools.
  # Especially relevant for clouddriver-ro and clouddriver-ro-deck which can
  # target a SQL read replica in their default pools.
  read-only: false
  taskRepository:
    enabled: true
  cache:
    enabled: true
    # These parameters were determined to be optimal via benchmark comparisons
    # in the Netflix production environment with Aurora. Setting these too low
    # or high may negatively impact performance. These values may be sub-optimal
    # in some environments.
    readBatchSize: 500
    writeBatchSize: 300
  scheduler:
    enabled: true
  connectionPools:
    default:
      # additional connection pool parameters are available here,
      # for more detail and to view defaults, see:
      # https://github.com/spinnaker/kork/blob/master/kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/ConnectionPoolProperties.kt
      default: true
      jdbcUrl: jdbc:mysql://${SPINNAKER_DB_HOST}:3306/clouddriver?user=clouddriver_service&password=${SPINNAKER_DB_PASSWORD}
      user: clouddriver_service
      password: ${SPINNAKER_DB_PASSWORD}
    # The following tasks connection pool is optional. At Netflix, clouddriver
    # instances pointed to Aurora read replicas have a tasks pool pointed at the
    # master. Instances where the default pool is pointed to the master omit a
    # separate tasks pool.
    tasks:
      user: clouddriver_service
      jdbcUrl: jdbc:mysql://${SPINNAKER_DB_HOST}:3306/clouddriver?user=clouddriver_service&password=${SPINNAKER_DB_PASSWORD}
  migration:
    user: clouddriver_migrate
    jdbcUrl: jdbc:mysql://${SPINNAKER_DB_HOST}:3306/clouddriver?user=clouddriver_service&password=${SPINNAKER_DB_PASSWORD}

redis:
  enabled: false
  cache:
    enabled: false
  scheduler:
    enabled: false
  taskRepository:
    enabled: false

services:
  front50:
    baseUrl: http://localhost:8080

management.health.elasticsearch.enabled: false

swagger:
  enabled: true
  title: clouddriver
  description: Cloud read and write operations
  contact: admin@host.net
  patterns:
    - .*elasticIps.*
    - .*cache.*
    - .*instance.*
    - .*search.*
    - .*security.*
    - .*vpcs.*
    - .*credentials.*
    - .*networks.*
    - .*subnets.*
    - .*ops.*
    - .*task.*
    - .*applications.*
    - .*aws.*
    - .*azure.*
    - .*appengine.*
    - .*gce.*
    - .*kubernetes.*
    - .*instances.*
    - .*reports.*
    - .*docker.*
    - .*job.*
    - .*process.*
    - .*dcos.*

default:
  # legacyServerPort is a non-ssl listener, if ssl is enabled. -1 to disable
  legacyServerPort: -1
  account:
    env: non-prod

aws:
  enabled: true
  client:
    maxErrorRetry: 7
  accounts:
    - name: non-prod
      requiredGroupMembership: []
      providerVersion: V1
      permissions: {}
      accountId: '933943444071'
      regions:
        - name: us-east-1
      assumeRole: role/spinnakerManaged
      lifecycleHooks: []
  primaryAccount: non-prod
  bakeryDefaults:
    baseImages: []
  defaultKeyPairTemplate: '{{name}}-keypair'
  defaultRegions:
    - name: us-east-1
  defaults:
    iamRole: BaseIAMRole

azure:
  enabled: ${AZURE_ENABLED:false}
  defaults:

  accounts:
    - name: my-azure-account
      clientId: ${AZURE_CLIENT_ID}
      appKey: ${AZURE_APPKEY}
      tenantId: ${AZURE_TENANT_ID}
      subscriptionId: ${AZURE_SUBSCRIPTION_ID}
      regions: ["westus", "eastus", "eastus2", "centralus"]
      defaultResourceGroup: ${AZURE_DEFAULT_RESOURCE_GROUP:"SpinnakerDefault"}
      defaultKeyVault: ${AZURE_DEFAULT_KEYVAULT}
      vmImages:
        - publisher: "MicrosoftWindowsServer"
          offer: "WindowsServer"
          sku: "2012-R2-Datacenter"
          version: "4.0.20151214"
        - publisher: "Canonical"
          offer: "UbuntuServer"
          sku: "14.04.5-LTS"
          version: "14.04.201612130"
        - publisher: "credativ"
          offer: "Debian"
          sku: "8"
          version: "8.0.201602010"
        - publisher: "OpenLogic"
          offer: "CentOS"
          sku: "7.1"
          version: "7.1.20150731"
        - publisher: "SUSE"
          offer: "openSUSE-Leap"
          sku: "42.1"
          version: "2016.01.14"
        - publisher: "SUSE"
          offer: "SLES"
          sku: "12-SP1"
          version: "2015.12.15"
  # Example how to set the Azure storage connection string related entries for retrieving the list of available custom VM images,
  #  where "scs" represents the Azure Storage connection string and "blobDir" is the relative path to the custom images container
  #
  #    customImages:
  #    - scs: ${AZURE_SCS1}
  #      blobDir: "system/Microsoft.Compute/Images/vhds"
  #      osType: "Windows"
  #      region: "westus"
  #    - scs: ${AZURE_SCS2}
  #      blobDir: "vhds"
  #      osType: "Linux"
  #      region: "westus"

appengine:
  enabled: false

google:
  enabled: false
  baseImageProjects:
    - centos-cloud
    - coreos-cloud
    - cos-cloud
    - debian-cloud
    - opensuse-cloud
    - rhel-cloud
    - suse-cloud
    - ubuntu-os-cloud
    - windows-cloud
  accounts:
    - name: my-gcp-account
      project: my-gcp-project
      required: true # Forces the account to be valid at startup
      alphaListed: true # Project is enabled for alpha features at GCP
      jsonPath: /root/.gcp/my-gcp-project.json
      imageProjects: # Additional projects that can images for deploying
        - my-gcp-image-project
  defaults:
    fallbackInstanceTypeDisks:
      - type: pd-ssd
        sizeGb: 10
    instanceTypeDisks:
      - instanceType: n1-standard-1
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-standard-2
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-standard-4
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-standard-8
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-standard-16
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-standard-32
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: f1-micro
        supportsLocalSSD: false
        disks:
          - type: pd-standard
            sizeGb: 10
      - instanceType: g1-small
        supportsLocalSSD: false
        disks:
          - type: pd-standard
            sizeGb: 10
      - instanceType: n1-highmem-2
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highmem-4
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highmem-8
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highmem-16
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highmem-32
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highcpu-2
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highcpu-4
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highcpu-8
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highcpu-16
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: n1-highcpu-32
        disks:
          - type: pd-ssd
            sizeGb: 10
      - instanceType: default
        disks:
          - type: pd-ssd
            sizeGb: 10

kubernetes:
  enabled: false
  v2:
    applyAppLabels: true

dockerRegistry:
  enabled: ${DOCKER_REGISTRY_ENABLED:false}

dcos:
  enabled: false

cf:
  enabled: ${providers.cf.enabled:false}
  accounts:
    - name: ${providers.cf.primaryCredentials.name}
      api: ${providers.cf.primaryCredentials.api}
      console: ${providers.cf.primaryCredentials.console}
      org: ${providers.cf.defaultOrg}
      space: ${providers.cf.defaultSpace}
      username: ${cf.account.name}
      password: ${cf.account.password}
      artifactUsername: ${cf.repo.username}
      artifactPassword: ${cf.repo.password}

oracle:
  enabled: ${ORACLE_ENABLED:false}

spring:
  jackson:
    mapper:
      SORT_PROPERTIES_ALPHABETICALLY: true
    serialization:
      ORDER_MAP_ENTRIES_BY_KEYS: true

operations.security:
  onMissingSecuredCheck: WARN
  onMissingValidator: WARN

# Turn on when confirming Fiat authorization checks
# logging.level.com.netflix.spinnaker.clouddriver.listeners: DEBUG

resilience4j.retry:
  instances:
    sqlTransaction:
      maxRetryAttempts: 5
      waitDuration: 100ms
      enableExponentialBackoff: false
      ignoreExceptions:
        - com.netflix.spinnaker.clouddriver.event.exceptions.AggregateChangeRejectedException
    sqlRead:
      maxRetryAttempts: 5
      waitDuration: 100ms
      enableExponentialBackoff: false

---

spring:
  profiles: prod

    # example https configuration for client auth to services:
    #default:
    # legacyServerPort is a non-ssl listener when the main listener has SSL enabled
    #legacyServerPort: 8501

    #server:
    #ssl:
    # enabled: true
    # keyStore: clouddriver-keystore.p12
    # keyStoreType: PKCS12
    # keyStorePassword: changeme
    # trustStore: services-truststore.p12
    # trustStoreType: PKCS12
    # trustStorePassword: changeme
    # clientAuth: need

    #aws:
    # example configuration for managing multiple accounts
    # role in managed account to assume:
    #defaultAssumeRole: role/myrole
    #accounts:
    # - name: account-display-name
    #   defaultKeyPair: key-pair
    #   edda: http://edda.{{region}}.host.net:7001
    #   discovery: "http://{{region}}.discovery.host.net:7001/eureka"
    #   accountId: 123456789012
    #   regions: #override default regions
  #     - name: us-east-1
  #     - name: ap-northeast-1

---

# local profile is activated by default when running the application - override values here for local development
#  for production, set spring.profiles.active to select the appropriate profile for your environment
spring:
  profiles: local

# an AWSCredentialsProvider that obtains session credentials via SSH through a bastion instance (useful for local development):
#bastion:
#  enabled: false
#  port: 22
#  proxyRegion: us-west-1
#  proxyCluster: my-credentials-cluster

udf:
  enabled: false
  udfRoot: /opt/clouddriver/config/udf
  defaultLegacyUdf: false

serviceLimits:
  implementationLimits:
    AmazonElasticLoadBalancing:
      defaults:
        rateLimit: 5.0