buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "com.moowork.node" version "1.3.1"
    id "nebula.ospackage" version "8.3.0"
    id 'com.palantir.git-version' version '0.12.2'
    id 'com.google.cloud.tools.jib' version '2.6.0'
}

apply plugin: 'io.spring.dependency-management'

gitProperties {
    keys = ['git.branch',
            'git.build.host',
            'git.build.version',
            'git.remote.origin.url',
            'git.build.time',
            'git.build.user.email',
            'git.build.user.name',
            'git.closest.tag.commit.count',
            'git.closest.tag.name',
            'git.tags',
            'git.build.version',
            'git.commit.id',
            'git.commit.message.full',
            'git.commit.time',
            'git.commit.user.email',
            'git.commit.user.name']

    dateFormat = "yyyy-MM-dd HH:mm:ss Z"
    dateFormatTimeZone = "Europe/Kiev"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'software.amazon.awssdk:ssm:2.10.89'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.testcontainers:postgresql:1.10.0'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.2')
    testImplementation('org.mockito:mockito-junit-jupiter:2.23.0')
    testCompile 'org.junit.platform:junit-platform-runner:1.3.2'
    testCompile 'org.junit.platform:junit-platform-commons:1.4.0'

}

bootJar {
    baseName "petclinic"
    launchScript() // creates fully executable archives
    manifest {
        attributes(
                'Implementation-Version': versionDetails().lastTag
        )
    }
}

def frontendPath = "${rootDir}" + "/frontend"

node {
    nodeModulesDir = file(frontendPath)
}
task npmBuild(type: NpmTask, dependsOn: npmInstall) {
    workingDir = file(frontendPath)
    inputs.files(fileTree(frontendPath).matching { exclude ".nuxt", "node_modules" })
    outputs.dir(frontendPath + '/public')

    doFirst {
        args = ['run', "build:prod"]
    }
}

task assembleApp() {
    dependsOn(npmBuild)
    finalizedBy(assemble)
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':backend:assembleApp')) {
        tasks['bootJar'].with {
            from(frontendPath + "/public") {
                include "**"
                into 'static'
            }
        }
    }
}

ospackage {
    packageName = 'petclinic'
    description = 'Spring Pet Clinic project'
    os = LINUX
    arch = X86_64
    type = BINARY
    version = versionDetails().lastTag
    release = 1

    configurationFile "/opt/petclinic/bin/petclinic.service"

    into '/opt/petclinic'

    from("${rootDir}/backend/build/libs") {
        into 'lib'
        user 'root'
        permissionGroup 'root'
    }

    from('lib/systemd/system') {
        into 'bin'
        user 'root'
        permissionGroup 'root'
    }
}

task packRpm(type: Rpm) {
    inputs.files(jar.outputs.files)
    outputs.dir("${rootDir}/backend/build/distributions")
    link('/etc/systemd/system/petclinic.service', '/opt/petclinic/bin/petclinic.service')
}

jib {
    to {
        image = "idmitriiev/spring-petclinic-spinnaker"
        tags = [versionDetails().lastTag, "latest"]
    }
}

tasks.jib.dependsOn tasks.processResources

tasks.processResources {
    dependsOn(npmBuild)
    from("${frontendPath}/public") {
        include "**"
        into "static"
    }
}